#include <Servo.h>
#include <math.h>

int leftAngle = 6; // Current left angle
int rightAngle = 175; // Current right angle
int leftHeight = 15;
int rightHeight = 15;

Servo leftSpool;
Servo rightSpool;
Servo leftRotate;
Servo rightRotate;

void myDelay(unsigned long ms) {
    unsigned long end = millis() + ms;
    while (millis() < end) {
    }
    // do nothing
}



/**
 * Move right a servo smoothly from a start position to an end position.
 *
 * @param start Starting position of the servo in degrees.
 * @param end Ending position of the servo in degrees.
 */
void moveRightServoSmooth(int start, int end) {
    int pos = start; // Initialize position to start
    unsigned long previousMillis = millis();
    unsigned long delayMillis = 15; // Delay between servo movements in milliseconds

    // Determine direction of movement
    int increment = (end > start) ? 1 : -1;

    // Move servo towards the end position
    while (pos != end) {
        unsigned long currentMillis = millis();
        if (currentMillis - previousMillis >= delayMillis) {
            pos += increment; // Increment position
            rightRotate.write(pos); // Move servo to new position
            if (abs(pos - start) < 20 || abs(pos - end) < 20) {
                // If near start or end, go slower.
                delayMillis = 30; // Adjust delay to control speed
            } else {
                delayMillis = 10; // Adjust delay to control speed
            }
            previousMillis = currentMillis;
        }
    }
    rightAngle = end;
}

/**
 * Move left a servo smoothly from a start position to an end position.
 *
 * @param start Starting position of the servo in degrees.
 * @param end Ending position of the servo in degrees.
 */
void moveLeftServoSmooth(int start, int end) {
    int pos = start; // Initialize position to start
    unsigned long previousMillis = millis();
    unsigned long delayMillis = 15; // Delay between servo movements in milliseconds

    // Determine direction of movement
    int increment = (end > start) ? 1 : -1;

    // Move servo towards the end position
    while (pos != end) {
        unsigned long currentMillis = millis();
        if (currentMillis - previousMillis >= delayMillis) {
            pos += increment; // Increment position
            leftRotate.write(pos); // Move servo to new position
            if (abs(pos - start) < 20 || abs(pos - end) < 20) {
                // If near start or end, go slower.
                delayMillis = 30; // Adjust delay to control speed
            } else {
                delayMillis = 10; // Adjust delay to control speed
            }
            previousMillis = currentMillis;
        }
    }
    leftAngle = end;
}

void setLeftActuatorHeight(int start, int end) {
    float strokeLength = 50; // 50mm stroke length
    int speed = 5; // 15mm/s speed
    float totalTimeFrom0to100 = strokeLength / speed;
    float duration = 1000 * totalTimeFrom0to100 * abs(((float)start - (float)end)) / 100;
    int delay = (unsigned long)duration;

    // Go up or go down
    if (start < end) {
        digitalWrite(13, HIGH);
        digitalWrite(12, LOW);
    } else if (start > end) {
        digitalWrite(13, LOW);
        digitalWrite(12, HIGH);
    }
    myDelay(delay);
    digitalWrite(13, LOW);
    digitalWrite(12, LOW);
    leftHeight = end;
}


void setRightActuatorHeight(int start, int end) {
    float strokeLength = 50; // 50mm stroke length
    int speed = 5; // 15mm/s speed
    float totalTimeFrom0to100 = strokeLength / speed;
    float duration = 1000 * totalTimeFrom0to100 * abs(((float)start - (float)end)) / 100;
    Serial.print("Duration ");
    Serial.println(duration);
    int delay = (unsigned long)duration;
    Serial.print("Delay ");
    Serial.println(delay);

    // Go up or go down
    if (start < end) {
        digitalWrite(8, HIGH);
        digitalWrite(4, LOW);
    } else if (start > end) {
        digitalWrite(8, LOW);
        digitalWrite(4, HIGH);
    }
    myDelay(delay);
    digitalWrite(8, LOW);
    digitalWrite(4, LOW);
    rightHeight = end;
}

void leftArmExtend(unsigned long duration) {
    leftSpool.write(0);
    myDelay(duration);
    leftSpool.write(90);
}

void rightArmExtend(unsigned long duration) {
    rightSpool.write(180);
    myDelay(duration);
    rightSpool.write(92);
}

void leftArmRetract(unsigned long duration) {
    leftSpool.write(180);
    myDelay(duration);
    leftSpool.write(90);
}

void rightArmRetract(unsigned long duration) {
    rightSpool.write(0);
    myDelay(duration);
    rightSpool.write(92);
}

void STARTLeftLinearAct(int start, int end) { 
    // Go up or go down
    if (start < end) {
        digitalWrite(13, HIGH);
        digitalWrite(12, LOW);
    } else if (start > end) {
        digitalWrite(13, LOW);
        digitalWrite(12, HIGH);
    }
}

void STOPLeftLinearAct(void) { 
  digitalWrite(13, LOW);
  digitalWrite(12, LOW);
}

void STARTRightLinearAct(int start, int end) { 
    // Go up or go down
    if (start < end) {
        digitalWrite(8, HIGH);
        digitalWrite(4, LOW);
    } else if (start > end) {
        digitalWrite(8, LOW);
        digitalWrite(4, HIGH);
    }
}

void STOPRightLinearAct(void) { 
    digitalWrite(8, LOW);
    digitalWrite(4, LOW);
}

void left_Extend_START(unsigned long duration) {
    leftSpool.write(0);
}

void left_Retract_START(unsigned long duration) {
    leftSpool.write(180);
}

void left_SPOOL_STOP(unsigned long duration) {
    leftSpool.write(90);
}

void right_Extend_START(unsigned long duration) {
    rightSpool.write(180);
}

void right_Retract_START(unsigned long duration) {
    rightSpool.write(0);
}

void right_SPOOL_STOP(unsigned long duration) {
    rightSpool.write(92);
}

void moveBothServosSmooth(int startLeft, int endLeft, int startRight, int endRight) {
    int posRight = startRight; // Initialize position for the right servo
    int posLeft = startLeft; // Initialize position for the left servo
    unsigned long previousMillisRight = millis();
    unsigned long previousMillisLeft = millis();
    unsigned long delayMillisRight = 15; // Initial delay between right servo movements in milliseconds
    unsigned long delayMillisLeft = 15; // Initial delay between left servo movements in milliseconds

    // Determine direction of movement for each servo
    int incrementRight = (endRight > startRight) ? 1 : -1;
    int incrementLeft = (endLeft > startLeft) ? 1 : -1;

    // Move servos towards their end positions
    while (posRight != endRight || posLeft != endLeft) {
        unsigned long currentMillis = millis();

        // Move right servo if it hasn't reached its end position
        if (posRight != endRight && currentMillis - previousMillisRight >= delayMillisRight) {
            posRight += incrementRight; // Increment position
            rightRotate.write(posRight); // Move right servo to new position

            // Adjust delay to control speed near start or end positions
            if (abs(posRight - startRight) < 20) {
                delayMillisRight = 30 - abs(posRight - startRight);

            } else if (abs(posRight - endRight) < 20) {
                delayMillisRight = 10 + abs(endRight - posRight);

            } else {
                delayMillisRight = 10;
            }

            previousMillisRight = currentMillis;
        }

        // Move left servo if it hasn't reached its end position
        if (posLeft != endLeft && currentMillis - previousMillisLeft >= delayMillisLeft) {
            posLeft += incrementLeft; // Increment position
            leftRotate.write(posLeft); // Move left servo to new position

            // Adjust delay to control speed near start or end positions
            if (abs(posLeft - startLeft) < 20) {
                delayMillisLeft = 30 - abs(posLeft - startLeft);

            } else if (abs(posLeft - endLeft) < 20) {
                delayMillisLeft = 10 + abs(endLeft - posLeft);

            } else {
                delayMillisLeft = 10;
            }

            previousMillisLeft = currentMillis;
        }
    }

    // Update the global angles
    rightAngle = endRight;
    leftAngle = endLeft;
}


void firstAndFourth(void) { 



  /*// Extend Right Arm and move to the fourth ball

        rightArmExtend(3300);
        moveRightServoSmooth(rightAngle, 124);
        // Extend Left Arm and move to the first ball
        leftArmExtend(3600);
        moveLeftServoSmooth(leftAngle, 62);


        // Lower Right Arm and extend to collect ball
        setRightActuatorHeight(65, 0);
        rightArmExtend(3150);
        // Pick up Fourth Ball with right arm
        setRightActuatorHeight(0, 75);


        // Lower Left Arm and extend to collect ball
        setLeftActuatorHeight(60, 0);
        leftArmExtend(1800);

        // Pick up first ball with left arm
        setLeftActuatorHeight(0, 40);
        leftArmRetract(2410);
*/





}

void thirdAndFifth(void) { 

}

void secondAndSixth(void) { 

}

void setup() {
    // put your setup code here, to run once:
    Serial.begin(9600);
    pinMode(13, OUTPUT);
    pinMode(12, OUTPUT);
    pinMode(8, OUTPUT);
    pinMode(4, OUTPUT);
    leftRotate.attach(10);
    rightRotate.attach(9);
    leftSpool.attach(6);
    rightSpool.attach(5);
    leftRotate.write(leftAngle);
    rightRotate.write(rightAngle);
}

bool executed = false;

void loop() {
    // put your main code here, to run repeatedly:
    // Initial angles get updated by the functions
    /* |-------------------------------------------------|
       |                                                 |
       |                                                 |
       |                                                 |
       |                                                 |
       |                                                 |
       |                                                 |
       |                                                 |
       |-------------------------------------------------|
    */
    if (!executed) {

        /* Starting Sequence */
        rightArmExtend(1200);
        // delay(50);
        setLeftActuatorHeight(9, 0);
        rightSpool.write(93);
        moveRightServoSmooth(rightAngle, 168);
        // setRightActuatorHeight(18, 0);






        /* First ball and Fourth Ball */
        // Extend Right Arm and move to the fourth ball
        rightArmExtend(3300);
        moveRightServoSmooth(rightAngle, 124);
        // Extend Left Arm and move to the first ball
        leftArmExtend(3600);
        moveLeftServoSmooth(leftAngle, 62);


        // Lower Right Arm and extend to collect ball
        setRightActuatorHeight(65, 0);
        rightArmExtend(3150);
        // Pick up Fourth Ball with right arm
        setRightActuatorHeight(0, 75);


        // Lower Left Arm and extend to collect ball
        setLeftActuatorHeight(60, 0);
        leftArmExtend(1800);
        // Pick up first ball with left arm
        setLeftActuatorHeight(0, 40);
        leftArmRetract(2410);


        // Lift up to Deposit
        setLeftActuatorHeight(0, 110);
        leftArmRetract(600);
        setLeftActuatorHeight(85, 0);
        leftArmExtend(750);
        leftSpool.write(91);








        /* Fifth Ball */
        // Move to the location
        rightArmRetract(3210);






        moveRightServoSmooth(rightAngle, 86);

        // Move Left Arm to Third Ball
        leftArmRetract(2900);   //ALREADY DONE
                     


        moveLeftServoSmooth(leftAngle, 131);
        leftArmExtend(2500);
        // Pickup 3rd ball
        setLeftActuatorHeight(70, 0);
        leftArmExtend(2770);
        // Deposit third ball
        setLeftActuatorHeight(0, 80);
        leftArmRetract(2180);
        setLeftActuatorHeight(0, 70);
        leftArmRetract(600);
        setLeftActuatorHeight(90, 0);

        // Move right the actuator up
        rightArmExtend(2280);
        setRightActuatorHeight(0, 90);
        // Pickup Fifth Ball

        rightArmRetract(2000);
        setRightActuatorHeight(120, 0);


        /* Sixth Ball and Second Ball */
        moveRightServoSmooth(rightAngle, 62);
        moveLeftServoSmooth(leftAngle, 97);


        // Second Ball
        leftArmExtend(1380);
        setLeftActuatorHeight(0, 45);
        moveLeftServoSmooth(leftAngle, 125);
        setLeftActuatorHeight(0, 90);
        leftArmRetract(300);


        


        // Pick up sixth ball
        rightArmExtend(1930);
        setRightActuatorHeight(20, 0);
        rightArmExtend(1200);
        setRightActuatorHeight(0, 80);

        rightArmRetract(2000);
        setRightActuatorHeight(0, 70);
        rightArmRetract(1000);





        
        leftArmRetract(400);
        leftArmExtend(400);
        rightArmRetract(400);
        rightArmExtend(400);
        setRightActuatorHeight(80, 0);
        rightArmRetract(1100);



        setLeftActuatorHeight(60, 0);
        leftSpool.write(94);

        /* Right Arm Closing Sequence */
        delay(1000);
        moveLeftServoSmooth(leftAngle, 4);
        moveRightServoSmooth(rightAngle, 175);
        rightSpool.write(89);
        leftSpool.write(96);



        executed = true;
    }
}

